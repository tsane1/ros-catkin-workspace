"""
File: astar.py

An implementation of the A* algorithm for ROS

Authors:
	- Tanuj Sane
	- Matthew Lamare

Since:
	- 4/4/2017

Version:
	- 1.0 Initial commit

"""

# Imports
import rospy
from heapq import *
import math
from nav_msgs.msg import GridCells
from geometry_msgs.msg import Point

"""
A class containing Node information
"""
class Node:
	def __init__(self, x, y, goal):
		self.x = x
		self.y = y


		self.g = 0
		self.h = math.sqrt((self.x - goal.pose.position.x) ** 2 + (self.y - goal.pose.position.y) ** 2)

	def update_g(self, parent):
		self.g = parent.g + 1

	def __lt__(self, other):
		return (self.g + self.h) <= (other.g + other.h)

	def __eq__(self, other):
		return self.x == other.x and self.y == other.y
		

def printNode(node):
	print "(" + str(node.x) + ", " + str(node.y) + ")"

def reached(goal, current):
	return goal.pose.position.x == current.x and goal.pose.position.y == current.y

"""
An implementation of the A* path planning algorithm

Parameters:
	- theMap {arr[][]} The 
"""
def a_star(theMap, start, goal):	
	closedGridCells = GridCells()
	frontierGridCells = GridCells()

	closedGridCells.header.stamp = rospy.Time()
	closedGridCells.header.frame_id = 'map'
	frontierGridCells.header.stamp = rospy.Time()
	frontierGridCells.header.frame_id = 'map'

	#set size of points
	closedGridCells.cell_width = 0.25
	closedGridCells.cell_height = 0.25

	frontierGridCells.cell_width = 0.25
	frontierGridCells.cell_height = 0.25

	frontier_pub = rospy.Publisher('/a_star/frontier', GridCells, queue_size=10)
	closed_pub = rospy.Publisher('/a_star/closed', GridCells, queue_size=10)

	# The set of nodes that has been seen already
	closedSet = []

	# The frontier
	openSet = [
		theMap[start.pose.position.x][start.pose.position.y]
	]
	
	startPoint = Point()
	startPoint.x = start.pose.position.x
	startPoint.y = start.pose.position.y

	frontierGridCells.cells.append(startPoint)
	
	# A flag to make sure we produce the correct print statement
	success = False 

	while not len(openSet) == 0:
		heapify(openSet)
		current = openSet[0]
	
		if reached(goal, current):
			closedSet.append(current)
			
			goalPoint = Point()
			goalPoint.x = current.x
			goalPoint.y = current.y

			closedGridCells.cells.append(goalPoint)
			frontierGridCells.cells = []

			closed_pub.publish(closedGridCells)
			rospy.sleep(rospy.Duration(0.5))
			frontier_pub.publish(frontierGridCells)
			rospy.sleep(rospy.Duration(0.5))
			
			return closedSet
			
		currentPoint = Point()
		currentPoint.x = current.x
		currentPoint.y = current.y
	
		openSet.remove(current)
		#print frontierGridCells.cells
		frontierGridCells.cells.remove(currentPoint)
		
		closedSet.append(current)
		closedGridCells.cells.append(currentPoint)		
  
		for n in getNeighbors(current, goal):
			if n in closedSet:
				continue

			tentative_gCost = current.g + 1
			#math.sqrt((n.x - current.x) ** 2 + (n.y - current.y) ** 2)
			
			n.g = 100
			if n not in openSet:
				openSet.append(n)			
				
				nPoint = Point()
				nPoint.x = n.x
				nPoint.y = n.y
	
				frontierGridCells.cells.append(nPoint)	
			elif tentative_gCost >= n.g:
				continue

			n.parent = current
			n.g = tentative_gCost
			f = n.g + n.h			
	
		#COLORS MOTHERFUCKER
		frontier_pub.publish(frontierGridCells)
		rospy.sleep(rospy.Duration(0.5))
		closed_pub.publish(closedGridCells)
		rospy.sleep(rospy.Duration(0.5))
			
	if not success:
		print "A* Fucked Up"
	exit()

"""
A smaller, pared-down version of A*
"""
def a_star_small(theMap, start, goal):	
	# The set of nodes that has been seen already
	closedSet = []

	# The frontier
	openSet = [
		theMap[int(start.pose.position.x)][int(start.pose.position.y)]
	]
	
	# A flag to make sure we produce the correct print statement
	success = False 

	while not len(openSet) == 0:
		heapify(openSet)
		current = openSet[0]
	
		if reached(goal, current):
			closedSet.append(current)
			return closedSet
	
		# Mark current Node as closed
		openSet.remove(current)
		closedSet.append(current)
  
		for n in getNeighbors(current, goal):
			if n in closedSet:
				continue

			tentative_gCost = current.g + 1

			if n not in openSet:
				openSet.append(n)			
				
			elif tentative_gCost >= n.g:
				continue

			n.parent = current
			n.g = tentative_gCost
			f = n.g + n.h			
		
	if not success:
		print "A* Fucked Up"

"""
This is a shitty subroutine that gets all the neighbors for a node
"""
def getNeighbors(currentNode, goal):
	returnList = []
	x = currentNode.x
	y = currentNode.y
	addNode(returnList, x -1, y - 1, goal)
	addNode(returnList, x, y -1, goal)
	addNode(returnList, x + 1, y - 1, goal)
	addNode(returnList, x - 1, y, goal)
	addNode(returnList, x + 1, y, goal)
	addNode(returnList, x - 1, y + 1, goal)
	addNode(returnList, x, y + 1, goal)
	addNode(returnList, x + 1, y + 1, goal)

	return returnList

"""
This is an even shittyer subsubroutine for above that adds nodes

rev 2.0: now includes error handling
"""
def addNode(nodeList, x, y, goal):
	if x < 0 or y < 0: 
		return
	newNode = Node(x,y, goal)
	nodeList.append(newNode)

